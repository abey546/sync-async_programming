Assignment: Asynchronous Programming in Python
1. Synchronous vs Asynchronous
Write two Python programs:

a) A synchronous program that simulates downloading three files sequentially. Use time.
   sleep to simulate each file download taking 2 seconds.
b)An asynchronous version of the program using asyncio
  sleep to download the files concurrently.
  
Hint: Measure the execution time of both versions using the time module to observe the difference.


2. Creating Coroutines
Write a coroutine called process_data that:

Accepts a data_id and a delay (in seconds).
Prints when it starts processing the data.
Uses await asyncio.sleep to simulate the delay.
Prints when the data processing is complete.
Test this coroutine by calling it with three different data_id values (e.g., 1, 2, 3) and
delays (e.g., 2, 3, 1) using asyncio.run.



3. Using asyncio.create_task
Modify the solution from Task 2 so that:

  You create tasks for the process_data coroutine using asyncio.create_task.
  The tasks are created and executed concurrently.
Bonus: Add a fourth coroutine called monitor_tasks that runs in parallel and
prints the status of the program every second until all tasks are complete.


4. Practice with await
Write a program that:

Defines a coroutine countdown_timer that accepts a number n.
Counts down from n to 0 with a 1-second delay between each number using await asyncio.sleep.
Test the coroutine by calling it for three different countdowns (e.g., 5, 3, and 7 seconds) concurrently.


